import utils.SQLRequests;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.io.File;
import java.util.ArrayList;
import java.util.Locale;

public class EditorWindow extends JFrame {

    private JPanel rootPanel;
    private JPanel usefulButtonPanel;
    private JScrollPane tablesPanel;
    private JTabbedPane editorTabbedPanel;
    private JScrollPane codePanel;
    private JScrollPane outputPanel;
    private JTextPane codeTextPanel;
    private JTextPane outputTextPanel;
    private JButton redoButton;
    private JButton playButton;
    private JButton undoButton;
    private JButton addNewDBButton;
    private JPanel innerTablesPanel;
    private JLabel noTablesLabel;

    private SQLRequests sqlRequests = null;

    public EditorWindow() {
        setContentPane(rootPanel);
        setSize(900, 900);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        addNewDBButton.addActionListener(actionEvent -> clickAddNewDB());
        playButton.addActionListener(actionEvent -> clickPlay());
    }

    private void clickAddNewDB() {
        JFileChooser chooser = new JFileChooser();
        int res = chooser.showDialog(null, "Choose DB");
        if (res == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            String pathToDB = file.getPath();
            System.out.println(pathToDB);
            sqlRequests = SQLRequests.getInstance();
            sqlRequests.setDB(pathToDB);
            ArrayList<String> list = sqlRequests.getTables();
            if (list != null) {
                fillTablesPanel(list);
            }
        }
    }

    private void clickPlay() {
        if (sqlRequests == null) {
            return;
        }
        String code = codeTextPanel.getText();
        if (code != null) {
            sqlRequests.request(code);
        }
    }

    private void fillTablesPanel(ArrayList<String> list) {
        innerTablesPanel.remove(noTablesLabel);
        for (String l : list) {
            System.out.println(l);
            Label label = new Label(l);
            innerTablesPanel.add(label);
        }
        innerTablesPanel.revalidate();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new BorderLayout(0, 0));
        rootPanel.setMinimumSize(new Dimension(900, 900));
        rootPanel.setPreferredSize(new Dimension(900, 900));
        usefulButtonPanel = new JPanel();
        usefulButtonPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        usefulButtonPanel.setMinimumSize(new Dimension(0, 150));
        rootPanel.add(usefulButtonPanel, BorderLayout.NORTH);
        undoButton = new JButton();
        undoButton.setIcon(new ImageIcon(getClass().getResource("/assets/undo-arrow.png")));
        undoButton.setText("");
        usefulButtonPanel.add(undoButton);
        redoButton = new JButton();
        redoButton.setIcon(new ImageIcon(getClass().getResource("/assets/redo_arrow.png")));
        redoButton.setText("");
        usefulButtonPanel.add(redoButton);
        playButton = new JButton();
        playButton.setIcon(new ImageIcon(getClass().getResource("/assets/play.png")));
        playButton.setText("");
        usefulButtonPanel.add(playButton);
        addNewDBButton = new JButton();
        Font addNewDBButtonFont = this.$$$getFont$$$(null, Font.BOLD, 20, addNewDBButton.getFont());
        if (addNewDBButtonFont != null) addNewDBButton.setFont(addNewDBButtonFont);
        addNewDBButton.setLabel("+");
        addNewDBButton.setText("+");
        usefulButtonPanel.add(addNewDBButton);
        tablesPanel = new JScrollPane();
        tablesPanel.setAutoscrolls(true);
        tablesPanel.setHorizontalScrollBarPolicy(30);
        tablesPanel.setMaximumSize(new Dimension(150, 32767));
        tablesPanel.setMinimumSize(new Dimension(150, 18));
        tablesPanel.setPreferredSize(new Dimension(200, 37));
        tablesPanel.setVerticalScrollBarPolicy(22);
        rootPanel.add(tablesPanel, BorderLayout.WEST);
        innerTablesPanel = new JPanel();
        innerTablesPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        tablesPanel.setViewportView(innerTablesPanel);
        noTablesLabel = new JLabel();
        noTablesLabel.setText("No tables");
        innerTablesPanel.add(noTablesLabel);
        editorTabbedPanel = new JTabbedPane();
        rootPanel.add(editorTabbedPanel, BorderLayout.CENTER);
        codePanel = new JScrollPane();
        codePanel.setHorizontalScrollBarPolicy(32);
        codePanel.setVerticalScrollBarPolicy(22);
        editorTabbedPanel.addTab("Code", codePanel);
        codeTextPanel = new JTextPane();
        Font codeTextPanelFont = this.$$$getFont$$$("JetBrains Mono", -1, 16, codeTextPanel.getFont());
        if (codeTextPanelFont != null) codeTextPanel.setFont(codeTextPanelFont);
        codeTextPanel.setText("");
        codePanel.setViewportView(codeTextPanel);
        outputPanel = new JScrollPane();
        editorTabbedPanel.addTab("Output", outputPanel);
        outputTextPanel = new JTextPane();
        outputPanel.setViewportView(outputTextPanel);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }
}
